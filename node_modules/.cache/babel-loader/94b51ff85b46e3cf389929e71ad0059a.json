{"ast":null,"code":"import _classCallCheck from \"/Users/geru/Desktop/argon-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/geru/Desktop/argon-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/geru/Desktop/argon-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/geru/Desktop/argon-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/geru/Desktop/argon-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/geru/Desktop/argon-dashboard-react-master/src/components/dash/modal.js\";\nimport React, { useState, createRef, useRef } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'; // import Canvas from '../dash/canvas'\n\nimport CanvasDraw from 'react-canvas-draw';\nimport spiral from '../../assets/img/tremor/Spiral_image.jpg';\n\nvar ModalTest = /*#__PURE__*/function (_React$Component) {\n  _inherits(ModalTest, _React$Component);\n\n  var _super = _createSuper(ModalTest);\n\n  function ModalTest(props) {\n    var _this;\n\n    _classCallCheck(this, ModalTest);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      modal: false,\n      results: false,\n      resultText: ''\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ModalTest, [{\n    key: \"clearModal\",\n    value: function clearModal() {\n      this.setState({\n        results: false,\n        resultText: ''\n      });\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        modal: !this.state.modal\n      });\n    }\n  }, {\n    key: \"makeblob\",\n    value: function makeblob(dataURL) {\n      var BASE64_MARKER = ';base64,';\n\n      if (dataURL.indexOf(BASE64_MARKER) == -1) {\n        var parts = dataURL.split(',');\n        var contentType = parts[0].split(':')[1];\n        var raw = decodeURIComponent(parts[1]);\n        return new Blob([raw], {\n          type: contentType\n        });\n      }\n\n      var parts = dataURL.split(BASE64_MARKER);\n      var contentType = parts[0].split(':')[1];\n      var raw = window.atob(parts[1]);\n      var rawLength = raw.length;\n      var uInt8Array = new Uint8Array(rawLength);\n\n      for (var i = 0; i < rawLength; ++i) {\n        uInt8Array[i] = raw.charCodeAt(i);\n      }\n\n      return new Blob([uInt8Array], {\n        type: contentType\n      });\n    }\n  }, {\n    key: \"populateResult\",\n    value: function populateResult(data, img) {\n      var parkisonsPercentage;\n      var healthyPercentage;\n\n      if (data.predictions[0].tagName === 'parkinson') {\n        parkisonsPercentage = data.predictions[0].probability;\n        healthyPercentage = data.predictions[1].probability;\n      } else {\n        healthyPercentage = data.predictions[0].probability;\n        parkisonsPercentage = data.predictions[1].probability;\n      }\n\n      var text = 'Our model shows that your spiral is ';\n\n      if (healthyPercentage <= parkisonsPercentage) {\n        text += \"\".concat((parkisonsPercentage * 100).toFixed(1), \"% similar to known Parkinson's spirals.\");\n      } else {\n        text += \"\".concat((healthyPercentage * 100).toFixed(1), \"% similar to known healthy spirals.\");\n      }\n\n      this.setState({\n        results: true,\n        resultText: text,\n        spiralRes: img\n      });\n    }\n  }, {\n    key: \"pingPlatform\",\n    value: function pingPlatform(e, img) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var url = \"https://westus2.api.cognitive.microsoft.com/customvision/v3.0/Prediction/6fede207-de99-4fbe-8f04-44a2154495ad/classify/iterations/Iteration8/image\";\n      var imgBlob = this.makeblob(img); // const req = new Request()\n\n      fetch(url, {\n        headers: {\n          \"Prediction-Key\": \"78a3f4d1ae95492680685c14da50480d\",\n          \"Content-Type\": \"application/octet-stream\",\n          \"Prediction-key\": \"78a3f4d1ae95492680685c14da50480d\"\n        },\n        method: 'POST',\n        // processData: false,\n        body: imgBlob\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this2.populateResult(data, img);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var content;\n\n      if (this.state.results === true) {\n        content = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }\n        }, this.state.resultText), /*#__PURE__*/React.createElement(\"small\", {\n          class: \"text-muted\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }\n        }, \"These results will be logged and sent to your doctor you may try again. Otherwise you may download your spiral or share directly with your Doctor.\")), /*#__PURE__*/React.createElement(ModalFooter, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(ModalFooter, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          color: \"secondary\",\n          onClick: function onClick() {\n            _this3.clearModal();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }\n        }, \"Retry\"), ' ', /*#__PURE__*/React.createElement(Button, {\n          color: \"primary\",\n          onClick: function onClick() {\n            console.log('finish');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }\n        }, \"Finish\"))));\n      } else {\n        content = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalBody, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(CanvasDraw, {\n          className: \"mx-auto sig-canvas\",\n          lazyRadius: 0,\n          brushRadius: 2,\n          brushColor: \"#222222\",\n          hideGrid: true,\n          hideInterface: true,\n          ref: function ref(CanvasReact) {\n            return _this3.saveableCanvas = CanvasReact;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(ModalFooter, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          color: \"secondary\",\n          onClick: function onClick() {\n            _this3.saveableCanvas.clear();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }\n        }, \"Clear\"), ' ', /*#__PURE__*/React.createElement(Button, {\n          color: \"primary\",\n          onClick: function onClick(e) {\n            _this3.pingPlatform(e, _this3.saveableCanvas.canvasContainer.children[1].toDataURL());\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }\n        }, \"Evaluate\")));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        size: \"lg\",\n        className: \"btn-msg\",\n        onClick: this.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }\n      }, this.props.buttonLabel), /*#__PURE__*/React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        className: this.props.className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }\n      }, \"Spiral Drawing Test\"), content));\n    }\n  }]);\n\n  return ModalTest;\n}(React.Component);\n\nexport default ModalTest;","map":{"version":3,"sources":["/Users/geru/Desktop/argon-dashboard-react-master/src/components/dash/modal.js"],"names":["React","useState","createRef","useRef","Button","Modal","ModalHeader","ModalBody","ModalFooter","CanvasDraw","spiral","ModalTest","props","state","modal","results","resultText","toggle","bind","setState","dataURL","BASE64_MARKER","indexOf","parts","split","contentType","raw","decodeURIComponent","Blob","type","window","atob","rawLength","length","uInt8Array","Uint8Array","i","charCodeAt","data","img","parkisonsPercentage","healthyPercentage","predictions","tagName","probability","text","toFixed","spiralRes","e","preventDefault","url","imgBlob","makeblob","fetch","headers","method","body","then","response","json","populateResult","catch","error","console","log","content","clearModal","CanvasReact","saveableCanvas","clear","pingPlatform","canvasContainer","children","toDataURL","buttonLabel","className","Component"],"mappings":"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","sourcesContent":["import React, { useState, createRef, useRef } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n// import Canvas from '../dash/canvas'\nimport CanvasDraw from 'react-canvas-draw'\nimport spiral from '../../assets/img/tremor/Spiral_image.jpg'\n\n\nclass ModalTest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            results: false,\n            resultText:''\n        };\n        this.toggle = this.toggle.bind(this);\n    }\n\n    clearModal() {\n        this.setState({\n            results:false,\n            resultText:''\n        })\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    makeblob(dataURL) {\n        var BASE64_MARKER = ';base64,';\n        if (dataURL.indexOf(BASE64_MARKER) == -1) {\n            var parts = dataURL.split(',');\n            var contentType = parts[0].split(':')[1];\n            var raw = decodeURIComponent(parts[1]);\n            return new Blob([raw], { type: contentType });\n        }\n        var parts = dataURL.split(BASE64_MARKER);\n        var contentType = parts[0].split(':')[1];\n        var raw = window.atob(parts[1]);\n        var rawLength = raw.length;\n\n        var uInt8Array = new Uint8Array(rawLength);\n\n        for (var i = 0; i < rawLength; ++i) {\n            uInt8Array[i] = raw.charCodeAt(i);\n        }\n\n        return new Blob([uInt8Array], { type: contentType });\n    };\n\n    populateResult(data, img) {\n        let parkisonsPercentage;\n        let healthyPercentage;\n        if (data.predictions[0].tagName === 'parkinson') {\n            parkisonsPercentage = data.predictions[0].probability;\n            healthyPercentage = data.predictions[1].probability;\n        } else {\n            healthyPercentage = data.predictions[0].probability;\n            parkisonsPercentage = data.predictions[1].probability;\n        }\n        let text = 'Our model shows that your spiral is '\n        if (healthyPercentage <= parkisonsPercentage) {\n            text += `${(parkisonsPercentage * 100).toFixed(1)}% similar to known Parkinson's spirals.`;\n        } else {\n            text += `${(healthyPercentage * 100).toFixed(1)}% similar to known healthy spirals.`;\n        }\n        this.setState({\n            results: true,\n            resultText: text,\n            spiralRes: img\n        })\n\n    }\n\n    pingPlatform(e, img) {\n        e.preventDefault();\n        let url = \"https://westus2.api.cognitive.microsoft.com/customvision/v3.0/Prediction/6fede207-de99-4fbe-8f04-44a2154495ad/classify/iterations/Iteration8/image\";\n        let imgBlob = this.makeblob(img);\n        // const req = new Request()\n        fetch(url, {\n            headers: {\n                \"Prediction-Key\": \"78a3f4d1ae95492680685c14da50480d\",\n                \"Content-Type\": \"application/octet-stream\",\n                \"Prediction-key\": \"78a3f4d1ae95492680685c14da50480d\"\n            },\n            method: 'POST',\n            // processData: false,\n            body: imgBlob\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                this.populateResult(data, img);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    render() {\n        let content;\n        if (this.state.results===true) {\n            content = <>\n                <ModalBody>\n                    <h3>{this.state.resultText}</h3>\n                    <small class=\"text-muted\">These results will be logged and sent to your doctor you may try again. Otherwise you may download your spiral or share directly with your Doctor.</small>\n                </ModalBody>\n                <ModalFooter>\n                    <ModalFooter>\n                        <Button\n                            color=\"secondary\"\n                            onClick={() => { this.clearModal()}}\n                        >Retry</Button>{' '}\n                        <Button\n                            color=\"primary\"\n                            onClick={() => { console.log('finish') }}\n                        >Finish</Button>\n                    </ModalFooter>\n                </ModalFooter>\n            </>\n\n        } else {\n            content = <><ModalBody>\n                <CanvasDraw\n                    className='mx-auto sig-canvas'\n                    lazyRadius={0}\n                    brushRadius={2}\n                    brushColor=\"#222222\"\n                    hideGrid\n                    hideInterface\n                    ref={(CanvasReact) => this.saveableCanvas = CanvasReact}\n                />\n            </ModalBody>\n                <ModalFooter>\n                    <Button\n                        color=\"secondary\"\n                        onClick={() => {this.saveableCanvas.clear()}}\n                    >Clear</Button>{' '}\n                    <Button\n                        color=\"primary\"\n                        onClick={(e) => { this.pingPlatform(e, this.saveableCanvas.canvasContainer.children[1].toDataURL()) }}\n                    >\n                        Evaluate\n        </Button>\n                </ModalFooter>\n            </>\n        }\n\n\n        return (\n            <div>\n                <Button color=\"primary\" size='lg' className='btn-msg' onClick={this.toggle}>{this.props.buttonLabel}</Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <ModalHeader toggle={this.toggle}>Spiral Drawing Test</ModalHeader>\n                    {content}\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default ModalTest;\n"]},"metadata":{},"sourceType":"module"}